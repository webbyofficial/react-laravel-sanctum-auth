import { jsx as _jsx } from "react/jsx-runtime";
import React from "react";
import ArgsProvider from "./args-provider";
import Msw from "./msw";
import { args, argTypes } from "virtual:generated-list";
import { useLadleContext } from "./context";
export default function composeEnhancers(module, storyName) {
    let decorators = [];
    let parameters = {};
    let mswHandlers = [];
    if (module.default && module.default.msw) {
        mswHandlers = module.default.msw;
    }
    if (module[storyName] && module[storyName].msw) {
        mswHandlers = module[storyName].msw;
    }
    const props = {
        args: {
            ...args,
            ...(module.default && module.default.args ? module.default.args : {}),
            ...(module[storyName].args ? module[storyName].args : {}),
        },
        argTypes: {
            ...argTypes,
            ...(module.default && module.default.argTypes
                ? module.default.argTypes
                : {}),
            ...(module[storyName].argTypes ? module[storyName].argTypes : {}),
        },
        component: module[storyName],
    };
    if (module[storyName] && Array.isArray(module[storyName].decorators)) {
        decorators = [...decorators, ...module[storyName].decorators];
    }
    if (module.default && Array.isArray(module.default.decorators)) {
        decorators = [...decorators, ...module.default.decorators];
    }
    parameters = {
        ...(module.default && module.default.parameters
            ? module.default.parameters
            : {}),
        ...(module[storyName].parameters ? module[storyName].parameters : {}),
    };
    return function RenderDecoratedStory() {
        const { globalState } = useLadleContext();
        const WithArgs = React.useMemo(() => function RenderWithArgs() {
            return (_jsx(Msw, { msw: mswHandlers, children: _jsx(ArgsProvider, { ...props }) }));
        }, []);
        if (decorators.length === 0)
            return _jsx(WithArgs, {});
        const getBindedDecorator = (i) => {
            return React.useRef(() => {
                const context = useLadleContext();
                const args = {};
                Object.keys(context.globalState.control).forEach((key) => (args[key] = context.globalState.control[key].value));
                return decorators[i](i === 0 ? WithArgs : getBindedDecorator(i - 1), {
                    ...context,
                    parameters,
                    argTypes: props.argTypes,
                    args,
                });
            }).current;
        };
        const Decorated = getBindedDecorator(decorators.length - 1);
        return globalState.controlInitialized ? _jsx(Decorated, {}) : _jsx(WithArgs, {});
    };
}
