import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import * as React from "react";
import { useHotkeys } from "react-hotkeys-hook";
import config from "../get-config";
import { watchers } from "../story-hmr";
import { A11y } from "../icons";
import { Modal, Code } from "../ui";
const runAxe = async (setViolations, setReportFinished, el) => {
    const axe = await import("axe-core");
    try {
        const results = await axe.default.run(document.getElementsByTagName("main"));
        setViolations(results.violations);
        setReportFinished(true);
        if (el)
            el.setAttribute("aria-hidden", "true");
    }
    catch (e) { }
};
const Violation = ({ violation }) => {
    const [more, setMore] = React.useState(false);
    return (_jsxs("li", { children: [violation.help, " (", violation.nodes.length, ").", " ", !more ? (_jsx("a", { href: "#", onClick: () => setMore(true), children: "Show details" })) : (_jsxs(_Fragment, { children: [_jsxs("ul", { children: [_jsxs("li", { children: ["ID: ", violation.id] }), _jsxs("li", { children: ["Impact: ", violation.impact] }), _jsxs("li", { children: ["Description: ", violation.description] }), _jsx("li", { children: _jsx("a", { href: violation.helpUrl, children: "Documentation" }) })] }), _jsx("p", { children: "Violating nodes:" }), _jsx("ul", { children: violation.nodes.map((node) => (_jsx("li", { children: _jsx(Code, { children: node.html }) }, node.html))) }), _jsx("p", { children: _jsx("a", { href: "#", onClick: () => setMore(false), children: "Hide details" }) })] }))] }));
};
const AxeReport = ({ reportFinished, violations, }) => {
    if (!reportFinished)
        return _jsx("p", { children: "Report is loading..." });
    if (violations.length === 0) {
        return (_jsxs("p", { children: ["There are no ", _jsx("a", { href: "https://github.com/dequelabs/axe-core", children: "axe" }), " ", "accessibility violations. Good job!"] }));
    }
    return (_jsxs(_Fragment, { children: [_jsxs("h3", { children: ["There are ", violations.length, " ", _jsx("a", { href: "https://github.com/dequelabs/axe-core", children: "axe" }), " accessibility violations"] }), _jsx("ul", { children: violations.map((violation) => (_jsx(Violation, { violation: violation }, violation.id))) })] }));
};
export const Button = ({ globalState }) => {
    const [showReport, setShowReport] = React.useState(false);
    const [reportFinished, setReportFinished] = React.useState(false);
    const [violations, setViolations] = React.useState([]);
    React.useEffect(() => {
        // re-run Axe on HMR updates, some timeout is needed to let the DOM settle
        watchers.push(() => {
            setTimeout(() => {
                const el = document.getElementById("ladle-root");
                // Addon Dialog aria hides the rest of page, we need to temporarily
                // make it visible for Axe function properly
                el.removeAttribute("aria-hidden");
                runAxe(setViolations, setReportFinished, el).catch(console.error);
            }, 50);
        });
    }, []);
    const text = "Show accessibility report.";
    const openReport = () => {
        runAxe(setViolations, setReportFinished, null).catch(console.error);
        // We give 100ms for axe to finish before displaying "Loading..."
        // inside of the dialog. Makes the UI transition to less jarring.
        setTimeout(() => setShowReport(!showReport), 100);
    };
    useHotkeys(config.hotkeys.a11y, () => (showReport ? setShowReport(false) : openReport()), {
        enabled: globalState.hotkeys && config.addons.a11y.enabled,
    });
    return (_jsx("li", { children: _jsxs("button", { "aria-label": text, "data-testid": "addon-a11y", title: text, onClick: openReport, className: showReport ? "a11y-active" : "", type: "button", children: [_jsx(A11y, {}), _jsx("span", { className: "ladle-addon-tooltip", children: text }), _jsx("label", { children: "Accessibility report" }), violations.length ? (_jsx("div", { className: "ladle-badge", children: violations.length })) : null, _jsx(Modal, { isOpen: showReport, close: () => setShowReport(false), label: "Dialog with the story accessibility report.", children: _jsx(AxeReport, { reportFinished: reportFinished, violations: violations }) })] }) }));
};
