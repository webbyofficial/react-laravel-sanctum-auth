import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import * as React from "react";
import queryString from "query-string";
import { Highlight, themes } from "prism-react-renderer";
import { useHotkeys } from "react-hotkeys-hook";
import { storySource, stories, StorySourceHeader, } from "virtual:generated-list";
import { ActionType } from "../../../shared/types";
import { Source } from "../icons";
import { Modal } from "../ui";
import config from "../get-config";
export const getQuery = (locationSearch) => {
    const urlVal = queryString.parse(locationSearch).source;
    if (urlVal === "true")
        return true;
    if (urlVal === "false")
        return false;
    return config.addons.source.defaultState;
};
export const CodeHighlight = ({ children, theme, language = "tsx", locStart, locEnd, className, }) => {
    const withLoc = typeof locStart !== "undefined" && typeof locEnd !== "undefined";
    const match = /language-(\w+)/.exec(className || "");
    if (match) {
        language = match[1];
        return (_jsx(Highlight, { code: children.trim(), language: language, theme: {
                ...(theme === "dark" ? themes.nightOwl : themes.github),
                plain: {
                    ...(theme === "dark" ? themes.nightOwl : themes.github).plain,
                    backgroundColor: "var(--ladle-bg-color-secondary)",
                },
            }, children: ({ className, style, tokens, getTokenProps }) => (_jsx("div", { className: className, style: {
                    ...style,
                    textAlign: "left",
                    margin: "0.5em 0 1em 0",
                    padding: "1em",
                }, children: tokens.map((line, i) => (_jsx("div", { children: line.map((token, key) => (_jsx("span", { ...getTokenProps({ token, key }) }, key))) }, i))) })) }));
    }
    if (withLoc) {
        return (_jsx(Highlight, { code: children.trim(), language: language, theme: {
                ...(theme === "dark" ? themes.nightOwl : themes.github),
                plain: {
                    ...(theme === "dark" ? themes.nightOwl : themes.github).plain,
                    backgroundColor: "var(--ladle-bg-color-secondary)",
                },
            }, children: ({ className, style, tokens, getLineProps, getTokenProps }) => (_jsx("pre", { className: className, style: {
                    ...style,
                    textAlign: "left",
                    margin: "0.5em 0 1em 0",
                    padding: "1em 0",
                    overflow: "auto",
                    maxHeight: "50vh",
                }, children: tokens.map((line, i) => (_jsxs("div", { id: `ladle_loc_${i + 1}`, ...getLineProps({ line, key: i }), style: { display: "table-row" }, children: [_jsx("span", { className: "ladle-addon-source-lineno", style: i + 1 >= locStart && i + 1 <= locEnd
                                ? {
                                    backgroundColor: "var(--ladle-color-accent)",
                                    color: "#FFF",
                                }
                                : undefined, children: i + 1 }), _jsx("div", { style: {
                                display: "table-cell",
                                paddingLeft: "0.5em",
                            }, children: line.map((token, key) => (_jsx("span", { ...getTokenProps({ token, key }) }, key))) })] }, i))) })) }));
    }
    return _jsx("code", { children: children });
};
const CodeFrame = ({ globalState }) => {
    if (!stories[globalState.story]) {
        return _jsx(_Fragment, { children: "There is no story loaded." });
    }
    const { entry, locStart, locEnd } = stories[globalState.story];
    React.useEffect(() => {
        window.location.hash = ``;
        window.location.hash = `ladle_loc_${locStart}`;
    }, [locStart]);
    return (_jsxs(_Fragment, { children: [_jsx(StorySourceHeader, { path: entry, locStart: locStart, locEnd: locEnd }), _jsx(CodeHighlight, { theme: globalState.theme, language: "tsx", locEnd: locEnd, locStart: locStart, children: decodeURIComponent(storySource[globalState.story]) })] }));
};
export const Button = ({ globalState, dispatch }) => {
    const text = "Show the story source code.";
    useHotkeys(config.hotkeys.source, () => {
        dispatch({
            type: ActionType.UpdateSource,
            value: !globalState.source,
        });
    }, {
        enabled: globalState.hotkeys && config.addons.source.enabled,
    });
    return (_jsx("li", { children: _jsxs("button", { "aria-label": text, "data-testid": "addon-source", title: text, onClick: () => {
                dispatch({
                    type: ActionType.UpdateSource,
                    value: !globalState.source,
                });
            }, className: globalState.source ? "source-active" : "", type: "button", children: [_jsx(Source, {}), _jsx("span", { className: "ladle-addon-tooltip", children: text }), _jsx("label", { children: "Story Source Code" }), _jsx(Modal, { isOpen: globalState.source, close: () => dispatch({
                        type: ActionType.UpdateSource,
                        value: false,
                    }), label: "Dialog with the story source code.", children: _jsx(CodeFrame, { globalState: globalState }) })] }) }));
};
