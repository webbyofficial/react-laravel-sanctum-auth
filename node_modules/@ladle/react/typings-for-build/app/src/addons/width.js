import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import * as React from "react";
import queryString from "query-string";
import { useHotkeys } from "react-hotkeys-hook";
import config from "../get-config";
import { ActionType } from "../../../shared/types";
import { stories } from "virtual:generated-list";
import { Modal } from "../ui";
import { Width } from "../icons";
export const getQuery = (locationSearch) => {
    const urlVal = queryString.parse(locationSearch).width;
    let res = 0;
    Object.keys(config.addons.width.options).forEach((key) => {
        if (key === urlVal ||
            parseInt(urlVal, 10) === config.addons.width.options[key]) {
            res = config.addons.width.options[key];
        }
    });
    return res !== 0 ? res : config.addons.width.defaultState;
};
export const Button = ({ globalState, dispatch }) => {
    const text = "Change the story viewport.";
    const [open, setOpen] = React.useState(false);
    useHotkeys(config.hotkeys.width, () => setOpen((prev) => !prev), {
        enabled: globalState.hotkeys && config.addons.width.enabled,
    });
    const storyData = stories[globalState.story];
    let metaWidth = storyData && storyData.meta ? storyData.meta.meta.width : 0;
    let options = config.addons.width.options;
    Object.keys(options).forEach((key) => {
        if (key === metaWidth) {
            metaWidth = options[key];
        }
    });
    if (metaWidth && !Object.values(options).includes(metaWidth)) {
        options = {
            custom: metaWidth,
            ...options,
        };
    }
    return (_jsx("li", { children: _jsxs("button", { "aria-label": text, "data-testid": "addon-width", title: text, onClick: () => setOpen(true), className: open ? "width-active" : "", type: "button", children: [_jsx(Width, {}), _jsx("span", { className: "ladle-addon-tooltip", children: text }), _jsx("label", { children: "Set story width" }), _jsxs(Modal, { isOpen: open, close: () => setOpen(false), label: "Dialog with the story width selector.", children: [_jsx("p", { children: "Select story width" }), _jsxs("div", { children: [_jsx("input", { onChange: () => dispatch({ type: ActionType.UpdateWidth, value: 0 }), type: "radio", id: `width-unset`, name: "width", value: 0, checked: globalState.width === 0 }), _jsx("label", { htmlFor: `width-unset`, style: { paddingLeft: "8px" }, children: "unset" })] }), Object.keys(options).map((key) => {
                            return (_jsxs("div", { children: [_jsx("input", { onChange: () => dispatch({
                                            type: ActionType.UpdateWidth,
                                            value: options[key],
                                        }), type: "radio", id: `width-${key}`, name: "width", value: options[key], checked: globalState.width === options[key] }), _jsxs("label", { htmlFor: `width-${key}`, style: { paddingLeft: "8px" }, children: [options[key], "px - ", key] })] }, key));
                        }), _jsx("p", {})] })] }) }));
};
