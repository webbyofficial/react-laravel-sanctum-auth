import React, { Component, ReactNode } from "react";
interface FrameProps {
    style?: React.CSSProperties;
    head?: ReactNode;
    title: string;
    className: string;
    initialContent?: string;
    mountTarget?: string;
    contentDidMount?: () => void;
    contentDidUpdate?: () => void;
    children?: ReactNode | ReactNode[];
    forwardedRef?: ((instance: HTMLIFrameElement | null) => void) | React.RefObject<HTMLIFrameElement>;
}
interface FrameState {
    iframeLoaded: boolean;
}
export declare class Frame extends Component<FrameProps, FrameState> {
    static defaultProps: {
        style: {};
        head: null;
        children: undefined;
        mountTarget: undefined;
        contentDidMount: () => void;
        contentDidUpdate: () => void;
        initialContent: string;
    };
    private _isMounted;
    private nodeRef;
    constructor(props: FrameProps);
    componentDidMount(): void;
    componentWillUnmount(): void;
    getDoc(): Document | null;
    getMountTarget(): Element | null | undefined;
    setRef: (node: HTMLIFrameElement) => void;
    handleLoad: () => void;
    renderFrameContents(): React.ReactPortal[] | null;
    render(): import("react/jsx-runtime").JSX.Element;
}
declare const _default: React.ForwardRefExoticComponent<FrameProps & React.RefAttributes<HTMLIFrameElement>>;
export default _default;
