import { jsx as _jsx } from "react/jsx-runtime";
import React, { Component } from "react";
import ReactDOM from "react-dom";
import { FrameContextProvider } from "./context";
import Content from "./content";
export class Frame extends Component {
    static defaultProps = {
        style: {},
        head: null,
        children: undefined,
        mountTarget: undefined,
        contentDidMount: () => { },
        contentDidUpdate: () => { },
        initialContent: '<!DOCTYPE html><html><head></head><body><div class="frame-root"></div></body></html>',
    };
    _isMounted = false;
    nodeRef = React.createRef();
    constructor(props) {
        super(props);
        this.state = { iframeLoaded: false };
    }
    componentDidMount() {
        this._isMounted = true;
        const doc = this.getDoc();
        if (doc && doc.readyState === "complete") {
            this.forceUpdate();
        }
        else {
            this.nodeRef.current?.addEventListener("load", this.handleLoad);
        }
    }
    componentWillUnmount() {
        this._isMounted = false;
        this.nodeRef.current?.removeEventListener("load", this.handleLoad);
    }
    getDoc() {
        return this.nodeRef.current ? this.nodeRef.current.contentDocument : null;
    }
    getMountTarget() {
        const doc = this.getDoc();
        if (this.props.mountTarget) {
            return doc?.querySelector(this.props.mountTarget);
        }
        return doc?.body.children[0];
    }
    setRef = (node) => {
        //@ts-ignore
        this.nodeRef.current = node;
        const { forwardedRef } = this.props;
        if (typeof forwardedRef === "function") {
            forwardedRef(node);
        }
        else if (forwardedRef) {
            //@ts-ignore
            forwardedRef.current = node;
        }
    };
    handleLoad = () => {
        this.setState({ iframeLoaded: true });
    };
    renderFrameContents() {
        if (!this._isMounted) {
            return null;
        }
        const doc = this.getDoc();
        if (!doc) {
            return null;
        }
        const contentDidMount = this.props.contentDidMount;
        const contentDidUpdate = this.props.contentDidUpdate;
        const win = doc.defaultView || doc.parentView;
        const contents = (_jsx(Content, { contentDidMount: contentDidMount, contentDidUpdate: contentDidUpdate, children: _jsx(FrameContextProvider, { value: { document: doc, window: win }, children: _jsx("div", { className: "frame-content", children: this.props.children }) }) }));
        const mountTarget = this.getMountTarget();
        return [
            ReactDOM.createPortal(this.props.head, this.getDoc().head),
            ReactDOM.createPortal(contents, mountTarget),
        ];
    }
    render() {
        const props = {
            ...this.props,
            srcDoc: this.props.initialContent,
            children: undefined,
        };
        delete props.head;
        delete props.initialContent;
        delete props.mountTarget;
        delete props.contentDidMount;
        delete props.contentDidUpdate;
        delete props.forwardedRef;
        return (_jsx("iframe", { ...props, ref: this.setRef, onLoad: this.handleLoad, children: this.state.iframeLoaded && this.renderFrameContents() }));
    }
}
export default React.forwardRef((props, ref) => (_jsx(Frame, { ...props, forwardedRef: ref })));
