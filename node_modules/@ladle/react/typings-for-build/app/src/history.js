/* eslint-disable @typescript-eslint/ban-ts-comment */
import { createBrowserHistory } from "history";
import queryString from "query-string";
import { ControlType } from "../../shared/types";
import config from "./get-config";
import debug from "./debug";
export const history = createBrowserHistory();
export { Action } from "history";
export const resetParams = () => {
    history.push(getHref({}));
};
const removeDefaultValues = (params) => {
    Object.keys(params).forEach((key) => {
        const val = params[key];
        const defaultVal = config.addons[key]
            ? config.addons[key].defaultState
            : "$$LADLE_unknown";
        if (val === defaultVal) {
            //@ts-ignore
            delete params[key];
        }
    });
};
export const modifyParams = (globalState) => {
    if (!globalState.controlInitialized)
        return;
    const queryParams = queryString.parse(location.search);
    const userQueryParams = {};
    Object.keys(queryParams).forEach((key) => {
        if (!key.startsWith("arg-")) {
            userQueryParams[key] = queryParams[key];
        }
    });
    const params = {
        ...userQueryParams,
        mode: globalState.mode,
        rtl: globalState.rtl,
        source: globalState.source,
        story: globalState.story,
        theme: globalState.theme,
        width: globalState.width,
        control: globalState.control,
    };
    removeDefaultValues(params);
    if (location.search !== getHref(params)) {
        debug(`Updating URL to ${getHref(params)}`);
        history.push(getHref(params));
    }
};
export const getHref = (params) => {
    removeDefaultValues(params);
    const encodedParams = {};
    Object.keys(params).forEach((key) => {
        if (key === "control") {
            // for controls we are spreading individual args into URL
            Object.keys(params[key]).forEach((argKey) => {
                const arg = params[key][argKey];
                if (arg.type === ControlType.Action) {
                    // a special case, actions are handled by the addon-action
                    return;
                }
                let value = arg.value;
                let isValueDefault = false;
                value = encodeURI(typeof arg.value === "string" ? arg.value : JSON.stringify(arg.value));
                try {
                    isValueDefault =
                        JSON.stringify(arg.value) === JSON.stringify(arg.defaultValue);
                    if (!isValueDefault &&
                        JSON.stringify(value) !== JSON.stringify(arg.defaultValue)) {
                        encodedParams[`arg-${argKey}`] = value;
                    }
                }
                catch (e) { }
            });
        }
        else {
            encodedParams[key] = params[key];
        }
    });
    return `?${queryString.stringify(encodedParams)}`;
};
