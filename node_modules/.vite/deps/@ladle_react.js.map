{
  "version": 3,
  "sources": ["../../@ladle/react/lib/app/src/context.ts", "../../@ladle/react/lib/shared/types.ts", "../../@ladle/react/lib/app/exports.ts"],
  "sourcesContent": ["import * as React from \"react\";\n//@ts-ignore\nimport LadleContext from \"@ladle/react-context\";\nimport type { GlobalAction, GlobalState } from \"../../shared/types\";\n\nexport const Context: React.Context<{\n  globalState: GlobalState;\n  dispatch: React.Dispatch<GlobalAction>;\n}> = LadleContext;\n\nexport const useLadleContext = () =>\n  React.useContext<{\n    globalState: GlobalState;\n    dispatch: React.Dispatch<GlobalAction>;\n  }>(LadleContext);\n", "import type { UserConfig as ViteUserConfig } from \"vite\";\n\ntype RecursivePartial<T> = {\n  [P in keyof T]?: RecursivePartial<T[P]>;\n};\n\nexport type ActionState = any[];\n\nexport type StoryOrder = string[] | ((stories: string[]) => string[]);\n\nexport enum ModeState {\n  Full = \"full\",\n  Preview = \"preview\",\n}\n\nexport enum ThemeState {\n  Light = \"light\",\n  Dark = \"dark\",\n  Auto = \"auto\",\n}\n\nexport enum ControlType {\n  Boolean = \"boolean\",\n  String = \"string\",\n  Number = \"number\",\n  Complex = \"complex\",\n  Function = \"function\",\n  Radio = \"radio\",\n  InlineRadio = \"inline-radio\",\n  Select = \"select\",\n  MultiSelect = \"multi-select\",\n  Check = \"check\",\n  InlineCheck = \"inline-check\",\n  Action = \"action\",\n  Range = \"range\",\n  Background = \"background\",\n}\n\nexport type ControlState = {\n  [key: string]: {\n    name?: string;\n    description?: string;\n    defaultValue?: any;\n    max?: number;\n    min?: number;\n    step?: number;\n    options?: string[];\n    value: any;\n    type?: ControlType;\n    labels?: { [key: string]: string };\n  };\n};\n\nexport enum ActionType {\n  UpdateAll = \"update-all\",\n  UpdateMode = \"update-mode\",\n  UpdateAction = \"update-action\",\n  UpdateRtl = \"update-rtl\",\n  UpdateSource = \"update-source\",\n  UpdateStory = \"update-story\",\n  UpdateTheme = \"update-theme\",\n  UpdateWidth = \"update-width\",\n  UpdateControl = \"update-control\",\n  UpdateControlIntialized = \"update-control-initialized\",\n  UpdateHotkeys = \"update-hotkeys\",\n}\n\nexport type GlobalAction =\n  | {\n      type: ActionType.UpdateAll;\n      value: GlobalState;\n    }\n  | {\n      type: ActionType.UpdateMode;\n      value: ModeState;\n    }\n  | {\n      type: ActionType.UpdateAction;\n      clear: boolean;\n      value: any;\n    }\n  | {\n      type: ActionType.UpdateRtl;\n      value: boolean;\n    }\n  | {\n      type: ActionType.UpdateSource;\n      value: boolean;\n    }\n  | {\n      type: ActionType.UpdateWidth;\n      value: number;\n    }\n  | {\n      type: ActionType.UpdateStory;\n      value: string;\n    }\n  | {\n      type: ActionType.UpdateTheme;\n      value: ThemeState;\n    }\n  | {\n      type: ActionType.UpdateHotkeys;\n      value: boolean;\n    }\n  | {\n      type: ActionType.UpdateControlIntialized;\n      value: boolean;\n    }\n  | {\n      type: ActionType.UpdateControl;\n      value: ControlState;\n    };\n\nexport type GlobalState = {\n  mode: ModeState;\n  theme: ThemeState;\n  action: ActionState;\n  story: string;\n  rtl: boolean;\n  source: boolean;\n  control: ControlState;\n  controlInitialized: boolean;\n  width: number;\n  hotkeys: boolean;\n};\n\nexport type UpdateStory = (story: string) => void;\n\nexport type AddonProps = {\n  dispatch: React.Dispatch<GlobalAction>;\n  globalState: GlobalState;\n};\n\nexport type StoryProps = {\n  dispatch: React.Dispatch<GlobalAction>;\n  globalState: GlobalState;\n  parameters: { [key: string]: any };\n  args: { [key: string]: any };\n  argTypes: { [key: string]: any };\n};\n\nexport type StoryDecorator<P = {}> = (\n  Story: React.FC<Partial<P>>,\n  context: StoryProps,\n) => React.ReactElement;\n\nexport type StoryTreeItem = {\n  id: string;\n  subId: string;\n  name: string;\n  isLinkable: boolean;\n  isExpanded: boolean;\n  isFocused: boolean;\n  children: StoryTree;\n};\n\nexport type StoryTree = StoryTreeItem[];\n\nexport type GeneratedStories = {\n  [key: string]: {\n    component: React.FC;\n  };\n};\n\nexport type CLIParams = Partial<Config> & {\n  theme?: ThemeState;\n  config?: string;\n};\n\nexport type PluginOptions = {\n  storyGlob: string;\n  configFolder: string;\n};\n\nexport type Config = {\n  stories: string;\n  defaultStory: string;\n  storyOrder: StoryOrder;\n  appendToHead: string;\n  viteConfig?: string;\n  host?: string;\n  port: number;\n  previewHost?: string;\n  previewPort: number;\n  outDir: string;\n  base?: string;\n  mode?: string;\n  noWatch: boolean;\n  hotkeys: {\n    fullscreen: string[];\n    search: string[];\n    nextStory: string[];\n    previousStory: string[];\n    nextComponent: string[];\n    previousComponent: string[];\n    control: string[];\n    width: string[];\n    rtl: string[];\n    a11y: string[];\n    source: string[];\n    darkMode: string[];\n  };\n  onDevServerStart: (serverUrl: string) => void;\n  i18n: { [key: string]: string };\n  addons: {\n    control: {\n      enabled: boolean;\n      defaultState: ControlState;\n    };\n    theme: {\n      enabled: boolean;\n      defaultState: ThemeState;\n    };\n    mode: {\n      enabled: boolean;\n      defaultState: ModeState;\n    };\n    action: {\n      enabled: boolean;\n      defaultState: ActionState;\n    };\n    rtl: {\n      enabled: boolean;\n      defaultState: boolean;\n    };\n    source: {\n      enabled: boolean;\n      defaultState: boolean;\n    };\n    a11y: {\n      enabled: boolean;\n    };\n    msw: {\n      enabled: boolean;\n    };\n    ladle: {\n      enabled: boolean;\n    };\n    width: {\n      enabled: boolean;\n      options: { [key: string]: number };\n      defaultState: number;\n    };\n  };\n};\n\nexport type UserConfig = RecursivePartial<Config>;\nexport type StoryEntry = {\n  storyId: string;\n  componentName: string;\n  namedExport: string;\n  locStart: number;\n  locEnd: number;\n};\nexport type ParsedStoriesResult = {\n  entry: string;\n  stories: StoryEntry[];\n  exportDefaultProps: {\n    title?: string;\n    meta: any;\n  };\n  namedExportToMeta: { [key: string]: any };\n  namedExportToStoryName: { [key: string]: string };\n  storyParams: { [key: string]: { title?: string; meta: any } };\n  fileId: string;\n  storySource: string;\n};\n\nexport type GetUserViteConfig = {\n  userViteConfig: ViteUserConfig;\n  hasReactPlugin: boolean;\n  hasReactSwcPlugin: boolean;\n  hasTSConfigPathPlugin: boolean;\n};\n\nexport type EntryData = {\n  [key: string]: ParsedStoriesResult;\n};\n", "import type * as React from \"react\";\nimport { useLadleContext } from \"./src/context\";\nimport {\n  StoryDecorator,\n  ActionType,\n  GlobalState,\n  ThemeState,\n  ModeState,\n  GlobalAction,\n  Config,\n} from \"../shared/types\";\n\nimport * as msw from \"msw\";\nexport { msw };\n\nexport type { UserConfig } from \"../shared/types\";\nexport { useMDXComponents } from \"@mdx-js/react\";\nexport const Story = (props: any) => props.children;\nexport const Meta = (props: any) => props.children;\nexport const Description = (props: any) => props.children;\n\ntype ReactNodeWithoutObject =\n  | React.ReactElement\n  | string\n  | number\n  | boolean\n  | null\n  | undefined;\n\nexport { useLadleContext, ActionType, ThemeState, ModeState };\nexport type { StoryDecorator };\n\n// deprecated, linkTo is just easier to use\nexport const useLink = () => {\n  const { dispatch } = useLadleContext();\n  return (value: string) => dispatch({ type: ActionType.UpdateStory, value });\n};\n\nexport const linkTo = (value: string) => {\n  const dispatch = (window as any)\n    .ladleDispatch as React.Dispatch<GlobalAction>;\n  return () => dispatch({ type: ActionType.UpdateStory, value });\n};\n\nexport const action = (name: string) => {\n  const dispatch = (window as any)\n    .ladleDispatch as React.Dispatch<GlobalAction>;\n  return (event: any = undefined) =>\n    dispatch({\n      type: ActionType.UpdateAction,\n      value: { name, event },\n      clear: false,\n    });\n};\n\nexport type GlobalProvider = React.FC<{\n  globalState: GlobalState;\n  dispatch: React.Dispatch<GlobalAction>;\n  config: Config;\n  children: ReactNodeWithoutObject;\n  storyMeta?: Meta;\n}>;\n\nexport type SourceHeader = React.FC<{\n  path: string;\n  locStart: number;\n  locEnd: number;\n}>;\n\nexport interface StoryDefault<P = {}> {\n  args?: Args<P>;\n  argTypes?: ArgTypes<P>;\n  decorators?: StoryDecorator<P>[];\n  meta?: Meta;\n  title?: string;\n  msw?: msw.RequestHandler[];\n  parameters?: { [key: string]: any };\n}\n\nexport interface Story<P = {}> extends React.FC<P> {\n  args?: Args<P>;\n  argTypes?: ArgTypes<P>;\n  decorators?: StoryDecorator<P>[];\n  meta?: Meta;\n  storyName?: string;\n  msw?: msw.RequestHandler[];\n  parameters?: { [key: string]: any };\n}\n\nexport type Args<\n  P = {\n    [key: string]: any;\n  },\n> = Partial<P>;\n\nexport type ControlType =\n  | \"select\"\n  | \"multi-select\"\n  | \"radio\"\n  | \"inline-radio\"\n  | \"check\"\n  | \"inline-check\"\n  | \"background\"\n  | \"color\"\n  | \"date\"\n  | \"number\"\n  | \"text\"\n  | \"boolean\"\n  | \"range\";\n\nexport interface ArgType<K = any> {\n  control?: {\n    name?: string;\n    labels?: { [key: string]: string };\n    type: ControlType;\n    min?: number;\n    max?: number;\n    step?: number;\n    [key: string]: any;\n  };\n  mapping?: { [key: string | number]: any };\n  options?: K[] | unknown;\n  defaultValue?: K;\n  description?: string;\n  name?: string;\n  action?: string;\n  [key: string]: any;\n}\n\nexport type ArgTypes<\n  P = {\n    [key: string]: any;\n  },\n> = {\n  [key in keyof P]?: ArgType<P[key]>;\n};\n\nexport interface Meta {\n  iframed?: boolean;\n  width?: string | number | \"xsmall\" | \"small\" | \"medium\" | \"large\";\n  mockDate?: string;\n  [key: string]: any;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA,YAAuB;AAUhB,IAAM,kBAAkB,MACvB,iBAGH,qBAAY;;;ACJV,IAAK,YAAL,kBAAKA,eAAL;AACL,EAAAA,WAAA,UAAO;AACP,EAAAA,WAAA,aAAU;AAFA,SAAAA;AAAA,GAAA;AAKL,IAAK,aAAL,kBAAKC,gBAAL;AACL,EAAAA,YAAA,WAAQ;AACR,EAAAA,YAAA,UAAO;AACP,EAAAA,YAAA,UAAO;AAHG,SAAAA;AAAA,GAAA;AAsCL,IAAK,aAAL,kBAAKC,gBAAL;AACL,EAAAA,YAAA,eAAY;AACZ,EAAAA,YAAA,gBAAa;AACb,EAAAA,YAAA,kBAAe;AACf,EAAAA,YAAA,eAAY;AACZ,EAAAA,YAAA,kBAAe;AACf,EAAAA,YAAA,iBAAc;AACd,EAAAA,YAAA,iBAAc;AACd,EAAAA,YAAA,iBAAc;AACd,EAAAA,YAAA,mBAAgB;AAChB,EAAAA,YAAA,6BAA0B;AAC1B,EAAAA,YAAA,mBAAgB;AAXN,SAAAA;AAAA,GAAA;;;ACpCL,IAAM,QAAQ,CAAC,UAAe,MAAM;AACpC,IAAM,OAAO,CAAC,UAAe,MAAM;AACnC,IAAM,cAAc,CAAC,UAAe,MAAM;AAc1C,IAAM,UAAU,MAAM;AAC3B,QAAM,EAAE,SAAS,IAAI,gBAAgB;AACrC,SAAO,CAAC,UAAkB,SAAS,EAAE,wCAA8B,MAAM,CAAC;AAC5E;AAEO,IAAM,SAAS,CAAC,UAAkB;AACvC,QAAM,WAAY,OACf;AACH,SAAO,MAAM,SAAS,EAAE,wCAA8B,MAAM,CAAC;AAC/D;AAEO,IAAM,SAAS,CAAC,SAAiB;AACtC,QAAM,WAAY,OACf;AACH,SAAO,CAAC,QAAa,WACnB,SAAS;AAAA,IACP;AAAA,IACA,OAAO,EAAE,MAAM,MAAM;AAAA,IACrB,OAAO;AAAA,EACT,CAAC;AACL;",
  "names": ["ModeState", "ThemeState", "ActionType"]
}
