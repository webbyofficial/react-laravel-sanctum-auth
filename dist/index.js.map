{"version":3,"sources":["../src/auth/AuthAPI.tsx","../src/auth/AuthContext.tsx","../src/auth/useApiClient.tsx"],"names":["axios","React","createContext","useContext","useEffect","useState","AuthContent","user","token","AuthProvider","children","fetchCsrfToken","useFetchCsrfToken","_setUser","csrf","csrfToken","_setCsrfToken","setFunctionWithLocalStorage","setter","key","value","error","setUser","setCsrfToken","fetchCsrf","__async","xsrf_token","useAuth","useApiClient","apiClient","config","path","cookie","BasicAuthAPIRequest","requestBody","response","useLogin","useRegister","useLogout"],"mappings":"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","sourcesContent":["import { AxiosInstance } from \"axios\";\nimport axios from \"axios\";\n\nimport { UserType, useAuth } from \"./AuthContext\";\nimport useApiClient from \"./useApiClient\";\n\nexport function useFetchCsrfToken() {\n  const apiClient = useApiClient();\n\n  const fetchCsrfToken = async (path: string = \"sanctum/csrf-cookie\") => {\n    await axios.get(path);\n    var xsrf_token = \"\";\n    document.cookie.split(\";\").forEach((cookie) => {\n      if (cookie.split(\"=\")[0].includes(\"XSRF-TOKEN\")) {\n        xsrf_token = cookie.split(\"=\")[1].split(\"%\")[0];\n      }\n    });\n    return xsrf_token;\n  };\n\n  return fetchCsrfToken;\n}\n\nasync function BasicAuthAPIRequest(\n  path: string,\n  requestBody: object,\n  apiClient: AxiosInstance,\n  setUser: (user: UserType) => void\n) {\n  try {\n    return await apiClient.post(path, requestBody).then((response) => {\n      if (response.status === 200) {\n        setUser(response.data);\n        return { success: true };\n      }\n    });\n  } catch (error) {\n    return { success: false, error: error };\n  }\n}\n\nexport function useLogin() {\n  const apiClient = useApiClient();\n  const { setUser } = useAuth();\n  const login = async (path: string = \"api/login\", requestBody: object) => {\n    return await BasicAuthAPIRequest(path, requestBody, apiClient, setUser);\n  };\n\n  return { login };\n}\n\nexport function useRegister() {\n  const apiClient = useApiClient();\n  const { setUser } = useAuth();\n\n  const register = async (\n    path: string = \"api/register\",\n    requestBody: object\n  ) => {\n    return await BasicAuthAPIRequest(path, requestBody, apiClient, setUser);\n  };\n\n  return { register };\n}\n\nexport function useLogout() {\n  const apiClient = useApiClient();\n  const { setUser } = useAuth();\n\n  const logout = async (path: string = \"api/logout\") => {\n    try {\n      await apiClient.post(path).then((response) => {\n        if (response.status === 200) {\n          localStorage.removeItem(\"user\");\n          setUser(null);\n          return { success: true };\n        }\n      });\n    } catch (error) {\n      return { success: false, error: error };\n    }\n  };\n\n  return { logout };\n}\n","import React, { createContext, useContext, useEffect, useState } from \"react\";\n\nimport { useFetchCsrfToken } from \"./AuthAPI\";\n\nexport type UserType = {\n  user: {\n    id: number;\n    name: string;\n    email: string;\n  };\n};\n\nexport type AuthContextType = {\n  user: UserType | null;\n  setUser: (user: UserType | null) => void;\n  csrfToken: string | null;\n  setCsrfToken: (token: string) => void;\n};\n\nconst AuthContent = createContext<AuthContextType>({\n  user: null,\n  setUser: (user: UserType | null) => {},\n  csrfToken: null,\n  setCsrfToken: (token: string) => {},\n});\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const fetchCsrfToken = useFetchCsrfToken();\n  const [user, _setUser] = useState<UserType>(\n    (JSON.parse(localStorage.getItem(\"user\") as string) as UserType) || null\n  );\n  const csrf = JSON.parse(\n    localStorage.getItem(\"csrfToken\") as string\n  ) as string;\n  const [csrfToken, _setCsrfToken] = useState<string>(csrf);\n\n  const setFunctionWithLocalStorage = (\n    setter: React.Dispatch<React.SetStateAction<any>>,\n    key: string,\n    value: any\n  ) => {\n    try {\n      localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      localStorage.setItem(key, \"\");\n    }\n    setter(value);\n  };\n\n  const setUser = (value: UserType | null) => {\n    setFunctionWithLocalStorage(_setUser, \"user\", value);\n  };\n\n  const setCsrfToken = (value: string | null) => {\n    setFunctionWithLocalStorage(_setCsrfToken, \"csrfToken\", value);\n  };\n\n  useEffect(() => {\n    async function fetchCsrf() {\n      const xsrf_token = await fetchCsrfToken();\n      setCsrfToken(xsrf_token);\n    }\n    fetchCsrf();\n    // eslint-disable-next-line\n  }, []);\n\n  return (\n    <AuthContent.Provider value={{ user, setUser, csrfToken, setCsrfToken }}>\n      {children}\n    </AuthContent.Provider>\n  );\n}\n\nexport function useAuth() {\n  return useContext(AuthContent);\n}\n","import axios from \"axios\";\nimport { useAuth } from \"./AuthContext\";\n\nexport default function useApiClient() {\n  const { csrfToken } = useAuth();\n\n  const apiClient = axios.create({\n    baseURL: \"http://localhost:80/\",\n    withCredentials: true,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Accept: \"application/json\",\n    },\n  });\n\n  apiClient.interceptors.request.use((config) => {\n    config.headers[\"X-XSRF-TOKEN\"] = csrfToken;\n    return config;\n  });\n\n  return apiClient;\n}\n"]}